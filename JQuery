Jquery is library of Javascript , it's very popular with lots of functions
Here is the learning notes which I take.
(leave out the steps to bulid the product enviroment)...

The first is How to use Jquery selector :
  1. $("#id")
  2. $(".class")
  3. $("element")
  4. $("element/id/class").parent()
  5. $("element/id/class").child();
  6. $(":element/id/class")
  7. $(":nth-child(n)")
  
Then we should know how to add function , here is the remarkable function I use :
   animated bounce hinge / clone() appendTo()
   How to add?
   ex:
      $("#id").addClass("animated bounce");(there are have two functions)
      $(".class").parent().addClass("hinge");
      
some JavaScript operations:
  1： .push()--takes one or more parameters and "pushes" them onto the end of the array.
  2:  .pop() --is used to "pop" a value off of the end of an array. We can store this "popped off" value by assigning it to a variable.
  3： .shift()-- it works just like .pop(), except it removes the first element instead of the last.
  4:  .unshift()-- works exactly like .push(), but instead of adding the element at the end of the array, unshift() adds the element at the beginning of the array.
  
the difference between '==' ,'=' and '==='
 examples:
    1 != 2      // true
    1 != "1"    // false
    1 != '1'    // false
    1 != true   // false
    0 != false  // false
    
    "==" compare the value 
    '===' value and type
    '=' assign value
    '!=' not equal 
    
 The use of multi-dimensional array:
 
          function multiplyAll(arr) {
          var product = 1;
          // Only change code below this line
          for(var i = 0;i<arr.length;i++)
            {
               for(var j =0;j<arr[i].length;j++){
                 product *= arr[i][j];
               }
            }
          // Only change code above this line
          return product;
        }

        // Modify values below to test your code
        multiplyAll([[1,2],[3,4],[5,6,7]]);
  
==============Profile Lookup=================
We have an array of objects representing different people in our contacts lists.

A lookUpProfile function that takes firstName and a property (prop) as arguments has been pre-written for you.

The function should check if firstName is an actual contact's firstName and the given property (prop) is a property of that contact.

If both are true, then return the "value" of that property.

If firstName does not correspond to any contacts then return "No such contact"

If prop does not correspond to any valid properties then return "No such property"

the contacts is like following:
  var contacts = [
    {
        "firstName": "Akira",
        "lastName": "Laine",
        "number": "0543236543",
        "likes": ["Pizza", "Coding", "Brownie Points"]
    },
    {
        "firstName": "Harry",
        "lastName": "Potter",
        "number": "0994372684",
        "likes": ["Hogwarts", "Magic", "Hagrid"]
    },
    {
        "firstName": "Sherlock",
        "lastName": "Holmes",
        "number": "0487345643",
        "likes": ["Intriguing Cases", "Violin"]
    },
    {
        "firstName": "Kristian",
        "lastName": "Vos",
        "number": "unknown",
        "likes": ["Javascript", "Gaming", "Foxes"]
    }
];

The answer is :
    function lookUpProfile(Name, prop){
// Only change code below this line
   for(var i=0;i<contacts.length;i++){
     if(contacts[i].firstName===Name){
        if(contacts[i].hasOwnProperty(prop))
           return contacts[i][prop];
       else 
         return "No such property";
     }
   }
  return "No such contact";
    
// Only change code above this line
   
}
